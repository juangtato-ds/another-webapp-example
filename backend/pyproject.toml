[tool.poetry]
name = "song-backend"
version = "0.0.0"
description = ""
authors = ["Juan Gonz√°lez <juan@dataspartan.com>"]
readme = "README.md"
packages = [
    {include = "song_backend", from="src"},
    {include = "song_backend_rest", from="src"},
]

[tool.poetry.dependencies]
fastapi = "^0.110.1"
psycopg2-binary = "^2.9.9"
pydantic = "^2.6.4"
pydantic-settings = "^2.3.1"
python = "^3.10"
sqlalchemy = "^2.0.29"
uvicorn = "^0.29.0"

[tool.poetry.group.dev.dependencies]
Flake8-pyproject = "^1.2.3"
httpx = "0.27.0"
mypy = "^1.9.0"
pytest = "^8.1.1"
pytest-cov = "^5.0.0"
pytest-split = "^0.8.2"
pytest-xdist = "^3.5.0"
ruff = "^0.4.2"

[tool.flake8]
max-line-length = 100
max-complexity = 15
exclude = ["tests/data"]
ignore = ["H101","W503"]
select = ["B", "C", "E", "W", "F", "T4"]
extend-ignore = ["E203"]


[tool.ruff]
line-length = 100
exclude = ["test/data"]


[tool.ruff.lint]
# max-args = 20
# good-names = ["i", "j", "k", "ex", "_", "e", "db", "df", "ms", "ts"]
# ignore = ["E114", "C0115", "C0116","E0611", "R0902", "R0903", "R0913"]
ignore = ["D100","D101", "D102", "D103"]


[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true


[tool.mypy]
plugins = [
  "pydantic.mypy"
]
python_version = "3.10"
disable_error_code = [
  "attr-defined"
]
exclude = [
    "tests/data"
]
ignore_missing_imports = true


[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true


[tool.pytest.ini_options]
testpaths = [
    "tests"
]
python_files = [ "test_*.py" ]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')"]
addopts = [
    "-p no:cacheprovider",
    "-ra",
    "--strict-markers",
    "--verbose",
    "--cov-config=.coveragerc",
    "--cov=src",
    #"--cov-report=term",
    "--cov-report=html:docs/coverage",
    "--cov-report=xml:docs/coverage/coverage.xml",
    "--junitxml=docs/test/junit/test-results.xml",
    "--verbose",
    "--cache-clear",
    "-m not slow"
]


[tool.coverage.run]
omit = []

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "@abstractmethod"
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
